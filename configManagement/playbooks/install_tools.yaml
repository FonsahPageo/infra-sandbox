---
- name: Software Installation Playbook
  hosts: test
  gather_facts: true
  become: true

  tasks:
    - name: Install Python and pip
      apt:
        name:
          - python3
          - python3-pip
        state: present

    - name: Ensure required Python packages are installed
      pip:
        name:
          - requests
          - urllib3
        state: latest
        executable: /usr/bin/pip3

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker.io
          - containerd
        state: present
        update_cache: no 

    # - name: Create keyring directory
    #   file:
    #     path: /usr/share/keyrings
    #     state: directory
    #     mode: '0755'
  
    # - name: Add Kubernetes GPG key
    #   shell: |
    #     curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
    #     chmod 644 /usr/share/keyrings/kubernetes-archive-keyring.gpg
    #   args:
    #     creates: /usr/share/keyrings/kubernetes-archive-keyring.gpg

    # - name: Add Kubernetes repository
    #   apt_repository:
    #     repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-{{ 'xenial' if ansible_distribution_release in ['bionic','focal','jammy'] else 'noble' }} main"
    #     state: present
    #     filename: kubernetes
    #     update_cache: yes

    # - name: Add Kubernetes repository
    #   apt_repository:
    #     repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-jammy main"
    #     state: present
    #     filename: kubernetes
    #     update_cache: yes

    # - name: Install kubectl
    #   apt:
    #     name: "kubectl={{ kubectl_version | default('1.30.0-00') }}"
    #     state: present
    #     update_cache: yes
    #   register: kubectl_install
    #   retries: 3
    #   delay: 10

    # - name: Download kubectl
    #   get_url:
    #     url: "https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl"
    #     dest: /usr/local/bin/kubectl
    #     mode: '0755'
    #     checksum: "sha256:5e5aa25fad1b9675b4d0dec8e3f1a7db7c1e1a0d629e1a9a5b8e9f9c8b1e8f2"

    - name: Alternative kubectl download via curl
      shell: |
        curl -L --retry 3 --output /usr/local/bin/kubectl https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl
        chmod +x /usr/local/bin/kubectl
      args:
        creates: /usr/local/bin/kubectl

    - name: Download Kustomize
      get_url:
        url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.3.0/kustomize_v5.3.0_linux_amd64.tar.gz"
        dest: "/tmp/kustomize.tar.gz"
        mode: "0755"

    - name: Extract and install Kustomize
      unarchive:
        src: "/tmp/kustomize.tar.gz"
        dest: "/usr/local/bin/"
        remote_src: yes
        mode: "0755"

    - name: Install Docker Compose
      shell: |
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Install OpenJDK 21 (LTS)
      apt:
        name: openjdk-21-jdk
        state: present

    - name: Install Python and pip
      apt:
        name:
          - python3
          - python3-pip
        state: present

    - name: Verify installations
      shell: "docker --version && kubectl version --client && kustomize version && docker-compose --version && java --version && python3 --version"
      register: verification_output

    - name: Display verification output
      debug:
        msg: "{{ verification_output.stdout_lines }}"